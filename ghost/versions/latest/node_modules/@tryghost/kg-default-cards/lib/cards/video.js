const {
    absoluteToRelative,
    relativeToAbsolute,
    htmlAbsoluteToRelative,
    htmlRelativeToAbsolute
} = require('@tryghost/url-utils/lib/utils');

module.exports = {
    name: 'video',
    type: 'dom',

    render({payload, env: {dom}}) {
        if (!payload.src) {
            return dom.createTextNode('');
        }

      
        let figure = dom.createElement('figure');
        figure.setAttribute('class', 'kg-card kg-embed-video');
 
       let video = dom.createElement('video');
        video.setAttribute('src', payload.src);
      
	video.setAttribute("width", "100%");
	video.setAttribute("height", "100%");
	video.setAttribute("controls", "controls");

        figure.appendChild(video);

        if (payload.caption) {
            let figcaption = dom.createElement('figcaption');
            figcaption.appendChild(dom.createRawHTMLSection(payload.caption));
            figure.appendChild(figcaption);
            figure.setAttribute('class', `${figure.getAttribute('class')} kg-card-hascaption`);
        }

        return figure;
    },

   absoluteToRelative(payload, options) {
        payload.src = payload.src && absoluteToRelative(payload.src, options.siteUrl, options);
        payload.caption = payload.caption && htmlAbsoluteToRelative(payload.caption, options.siteUrl, options);
        return payload;
    },

    relativeToAbsolute(payload, options) {
        payload.src = payload.src && relativeToAbsolute(payload.src, options.siteUrl, options.itemUrl, options);
        payload.caption = payload.caption && htmlRelativeToAbsolute(payload.caption, options.siteUrl, options.itemUrl, options);
        return payload;
    }
};

